===============================做题前提===============================
create table teacher(
	tno int not null primary key,--老师番号
	tname varchar(20) not null --老师姓名
	)ENGINE=InnoDB default charset=utf8 comment="教师表";

INSERT INTO teacher(tno,tname)VALUES(1,'张老师');
INSERT INTO teacher(tno,tname)VALUES(2,'王老师');
INSERT INTO teacher(tno,tname)VALUES(3,'李老师');
INSERT INTO teacher(tno,tname)VALUES(4,'赵老师');
INSERT INTO teacher(tno,tname)VALUES(5,'刘老师');
INSERT INTO teacher(tno,tname)VALUES(6,'向老师');
INSERT INTO teacher(tno,tname)VALUES(7,'李文静');
INSERT INTO teacher(tno,tname)VALUES(8,'叶平');

=======================================================================
create table student(
	sno int not null primary key,--学生番号
	sname varchar(20) not null,--学生姓名
	sage datetime not null,--学生年龄
	ssex char(2) not null--学生性别
	)engine=innodb default charset=utf8 comment="学生表";

INSERT INTO student(sno,sname,sage,ssex) VALUES(1,'张三','1980-1-23','男');
INSERT INTO student(sno,sname,sage,ssex) VALUES(2,'李四','1982-12-12','男');
INSERT INTO student(sno,sname,sage,ssex) VALUES(3,'张飒','1981-9-9','男');
INSERT INTO student(sno,sname,sage,ssex) VALUES(4,'莉莉','1983-3-23','女');
INSERT INTO student(sno,sname,sage,ssex) VALUES(5,'王弼','1982-6-21','男');
INSERT INTO student(sno,sname,sage,ssex) VALUES(6,'王丽','1984-10-10','女');
INSERT INTO student(sno,sname,sage,ssex) VALUES(7,'刘香','1980-12-22','女');

========================================================================
create table course(
	cno int not null primary key,--课程番号
	cname varchar(20) not null,--课程名字
	tno int not null--外键映射到教师番号
	)engine=innodb default charset=utf8 comment="课程表";


-- 添加外键
alter table course add constraint fk_course_teacher
foreign key (tno) references teacher(tno);

insert into course(cno,cname,tno) values(1,'企业管理',3);
insert into course(cno,cname,tno) values(2,'马克思',1);
insert into course(cno,cname,tno) values(3,'UML',2);
insert into course(cno,cname,tno) values(4,'数据库',5);
insert into course(cno,cname,tno) values(5,'物理',8);

=====================================================================
create table sc(
	sno int not null,--分数番号
	cno int not null,--课程番号
	score int not null--分数
	)engine=innodb default charset=utf8 comment="成绩表";


-- 添加外键
alter table sc add constraint fk_sc_course
foreign key (cno) references course (cno);


-- 添加外键
alter table sc add constraint fk_sc_student
foreign key (sno) references student (sno);

INSERT INTO sc(sno,cno,score)VALUES(1,1,80);
INSERT INTO sc(sno,cno,score)VALUES(1,2,86);
INSERT INTO sc(sno,cno,score)VALUES(1,3,83);
INSERT INTO sc(sno,cno,score)VALUES(1,4,89);


INSERT INTO sc(sno,cno,score)VALUES(2,1,50);
INSERT INTO sc(sno,cno,score)VALUES(2,2,36);
INSERT INTO sc(sno,cno,score)VALUES(2,3,43);
INSERT INTO sc(sno,cno,score)VALUES(2,4,59);


INSERT INTO sc(sno,cno,score)VALUES(3,1,50);
INSERT INTO sc(sno,cno,score)VALUES(3,2,96);
INSERT INTO sc(sno,cno,score)VALUES(3,3,73);
INSERT INTO sc(sno,cno,score)VALUES(3,4,69);


INSERT INTO sc(sno,cno,score)VALUES(4,1,90);
INSERT INTO sc(sno,cno,score)VALUES(4,2,36);
INSERT INTO sc(sno,cno,score)VALUES(4,3,88);
INSERT INTO sc(sno,cno,score)VALUES(4,4,99);


INSERT INTO sc(sno,cno,score)VALUES(5,1,90);
INSERT INTO sc(sno,cno,score)VALUES(5,2,96);
INSERT INTO sc(sno,cno,score)VALUES(5,3,98);
INSERT INTO sc(sno,cno,score)VALUES(5,4,99);


INSERT INTO sc(sno,cno,score)VALUES(6,1,70);
INSERT INTO sc(sno,cno,score)VALUES(6,2,66);
INSERT INTO sc(sno,cno,score)VALUES(6,3,58);
INSERT INTO sc(sno,cno,score)VALUES(6,4,79);


INSERT INTO sc(sno,cno,score)VALUES(7,1,80);
INSERT INTO sc(sno,cno,score)VALUES(7,2,76);
INSERT INTO sc(sno,cno,score)VALUES(7,3,68);
INSERT INTO sc(sno,cno,score)VALUES(7,4,59);
INSERT INTO sc(sno,cno,score)VALUES(7,5,89);

============================50个问题=================================
-- 1、查询课程1的成绩比课程2的成绩高的所有学生的学号；
(select sno,score from sc where cno = 1) as con1;
(select sno,score from sc where cno = 2) as con2;
select sno from (select sno,score from sc where cno = 1) as con1,(select sno,score from sc where cno = 2) as con2 

where con1.sno = con2.sno and con1.score > con2.score;报错----ERROR 1052(23000) :Column 'sno' in field list is 

ambiguous(模糊不清的)
修正：select con1.sno as sno from (select sno,score from sc where cno = 1) as con1,(select sno,score from sc 

where cno = 2) as con2 where con1.sno = con2.sno and con1.score > con2.score;
=====================================================================

-- 2、查询平均成绩大于60分的同学的学号和平均成绩；
select sno , avg(score) as average_Score from sc group by sno having avg(score);
======================================做第2题所产生的问题与解决过程============================================
在更新表数据的过程中，误更新了其他数据，头疼，回滚如果没有设置回滚点就只能回到上一条命令，问题是我select * 后才发现的
错误，此时就没办法使用回滚了，这是需要注意的问题了，1更新的where条件一定要写准确2为防止这样的事情发生就提前设置回滚点。
现在在网上找相应的解决方案：主要还是通过binlog来进行恢复，前提是binlog_format必须是Row格式，否则只能通过备份来恢复数据

了!
/*遇到的问题：先提一下最简单的方法就是设置保存点，但是在设置过程中遇到一个问题，就是保存点不存在，后在网上找到原因：
autocommit模式：在开启情况下，对于每条statement来说，都会自动形成一个commit，也就是会即时对开始和结束一个事务。所以，

当出现rollback to savepoint出现这个错误时，第一步是检查autocommit模式是否有开启。
select @@autocommit;
1则代表开启，0则代表未开启。如果需要关闭，则输入以下代码set autocommit = 0;
这时候，就是必须对每一个事务都要手动开始或保存。代码为start transaction or begin  要结束的话，就要comment或者rollback

来结束这个阶段 在autocommit开启的情况下，也可以人为地，将好几个statement合在一起，这时也是用上一段代码，这时候commit或

者rollback的就是好几条statement了*/

历史遗留问题：
1.my.ini的配置问题，如何配置与使用
2.关于binlog的my.ini配置完成后，如何使用，并且能执行数据恢复
3.数据备份是怎么做，恢复又是怎么做
======================================================================
mysql在电脑的服务中没有此任务解决方法：运行命令 C:\Program Files\MySQL\MySQL Server 5.5\bin>mysqld.exe -install 回车
出现Service successfully installed.
======================================================================
select @@basedir 查找mysql的安装目录
select @@datadir 查找数据存储目录
=========================================第2题 end  ========================

-- 3、查询所有同学的学号、姓名、选课数、总成绩；


