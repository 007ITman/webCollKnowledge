java.math.BigDecimal
用来对超过16位有效位的数进行精确的运算。双精度浮点型变量double可以处理16位有效数。在实际应用中，需要对更大或者更小的数进行运算和处理。
float和double只能用来做科学计算或者是工程计算，在商业计算中要用java.math.BigDecimal。BigDecimal所创建的是对象，我们不能使用传统的+、-、*、/等算术运算符直接对其对象进行数学运算，而必须调用其相对应的方法。
方法中的参数也必须是BigDecimal的对象。构造器是类的特殊方法，专门用来创建对象，特别是带有参数的对象。


/*
 * 构造方法:
 * 		public BigDecimal(String val):
 * 
 * 金融相关的东西(例:银行钱的小数,商品价格小数,实验小数)
 * 
 * 成员方法:
 * 		public BigDecimal add(BigDecimal augend):加
 * 		public BigDecimal subtract(BigDecimal subtrahend):减
 * 		public BigDecimal multiply(BigDecimal multiplicand):乘
 * 		public BigDecimal divide(BigDecimal divisor):除
 * 		public BigDecimal divide(BigDecimal divisor,int scale,int roundingMode):商,几位小数,如何舍取。
 * 		
 */
public class BigDecimalDemo {
	public static void main(String[] args) {
		System.out.println(0.09 + 0.01);
		System.out.println(1.0 - 0.32);
		System.out.println(1.015 * 100);
		System.out.println(1.301 / 100);

// public BigDecimal add(BigDecimal augend):加
		BigDecimal bd1 = new BigDecimal("0.09");
		BigDecimal bd2 = new BigDecimal("0.01");
		System.out.println("add:" + bd1.add(bd2));
		System.out.println("----------------------");
		// public BigDecimal subtract(BigDecimal subtrahend):减
		BigDecimal bd3 = new BigDecimal("1.0");
		BigDecimal bd4 = new BigDecimal("0.32");
		System.out.println("subtract:" + bd3.subtract(bd4));
		System.out.println("----------------------");
		// public BigDecimal multiply(BigDecimal multiplicand):乘
		BigDecimal bd5 = new BigDecimal("1.015");
		BigDecimal bd6 = new BigDecimal("100");
		System.out.println("multiply:" + bd5.multiply(bd6));
		System.out.println("----------------------");
		// public BigDecimal divide(BigDecimal divisor):除
		BigDecimal bd7 = new BigDecimal("1.301");
		BigDecimal bd8 = new BigDecimal("100");
		System.out.println("divide:" + bd7.divide(bd8));
		System.out.println("divide:" + bd7.divide(bd8,3,BigDecimal.ROUND_HALF_UP));
		System.out.println("divide:" + bd7.divide(bd8,9,BigDecimal.ROUND_HALF_UP));
	}
}
